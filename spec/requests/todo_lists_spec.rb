# frozen_string_literal: true

require 'rails_helper'
require 'swagger_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/todo_lists' do
  # This should return the minimal set of attributes required to create a valid
  # TodoList. As you add validations to TodoList, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for(:todo_list)
  end

  let(:invalid_attributes) do
    attributes_for(:todo_list).update(title: nil)
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TodoListsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      TodoList.create! valid_attributes
      get todo_lists_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      todo_list = TodoList.create! valid_attributes
      todo_list.todo_items.create(body: 'Todo item')

      get todo_list_url(todo_list), as: :json

      expect(response).to be_successful

      content = response.parsed_body
      expect(content['todo_items'].count).to eq(1)
    end
  end

  describe 'POST /create' do
    context 'when user is signed in' do
      it 'creates a new TodoList' do
        account = create(:account)
        post '/login', params: { email: account.email, password: 'secret' }, as: :json
        expect do
          post todo_lists_url, params: { todo_list: valid_attributes }, headers: valid_headers, as: :json
        end.to change(account.todo_lists, :count).by(1)
      end
    end

    context 'with valid parameters' do
      it 'creates a new TodoList' do
        expect do
          post todo_lists_url,
               params: { todo_list: valid_attributes }, headers: valid_headers, as: :json
        end.to change(TodoList, :count).by(1)
      end

      it 'renders a JSON response with the new todo_list' do
        post todo_lists_url,
             params: { todo_list: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new TodoList' do
        expect do
          post todo_lists_url,
               params: { todo_list: invalid_attributes }, as: :json
        end.not_to change(TodoList, :count)
      end

      it 'renders a JSON response with errors for the new todo_list' do
        post todo_lists_url,
             params: { todo_list: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { title: 'New list' }
      end

      it 'updates the requested todo_list' do
        todo_list = TodoList.create! valid_attributes

        expect do
          patch todo_list_url(todo_list),
                params: { todo_list: new_attributes }, headers: valid_headers, as: :json
          todo_list.reload
        end.to change(todo_list, :title)
      end

      it 'renders a JSON response with the todo_list' do
        todo_list = TodoList.create! valid_attributes
        patch todo_list_url(todo_list),
              params: { todo_list: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the todo_list' do
        todo_list = TodoList.create! valid_attributes
        patch todo_list_url(todo_list),
              params: { todo_list: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested todo_list' do
      todo_list = TodoList.create! valid_attributes
      expect do
        delete todo_list_url(todo_list), headers: valid_headers, as: :json
      end.to change(TodoList, :count).by(-1)
    end
  end
end
